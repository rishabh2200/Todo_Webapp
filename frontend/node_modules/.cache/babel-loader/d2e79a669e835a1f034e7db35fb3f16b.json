{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { getCurrentHub } from '@sentry/browser';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nexport var UNKNOWN_COMPONENT = 'unknown';\nvar TRACING_GETTER = {\n  id: 'Tracing'\n};\nvar globalTracingIntegration = null;\n/** @deprecated remove when @sentry/apm no longer used */\n\nvar getTracingIntegration = function getTracingIntegration() {\n  if (globalTracingIntegration) {\n    return globalTracingIntegration;\n  }\n\n  globalTracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n  return globalTracingIntegration;\n};\n/**\n * pushActivity creates an new react activity.\n * Is a no-op if Tracing integration is not valid\n * @param name displayName of component that started activity\n * @deprecated remove when @sentry/apm no longer used\n */\n\n\nfunction pushActivity(name, op) {\n  if (globalTracingIntegration === null) {\n    return null;\n  }\n\n  return globalTracingIntegration.constructor.pushActivity(name, {\n    description: \"<\" + name + \">\",\n    op: \"react.\" + op\n  });\n}\n/**\n * popActivity removes a React activity.\n * Is a no-op if Tracing integration is not valid.\n * @param activity id of activity that is being popped\n * @deprecated remove when @sentry/apm no longer used\n */\n\n\nfunction popActivity(activity) {\n  if (activity === null || globalTracingIntegration === null) {\n    return;\n  }\n\n  globalTracingIntegration.constructor.popActivity(activity);\n}\n/**\n * Obtain a span given an activity id.\n * Is a no-op if Tracing integration is not valid.\n * @param activity activity id associated with obtained span\n * @deprecated remove when @sentry/apm no longer used\n */\n\n\nfunction getActivitySpan(activity) {\n  if (activity === null || globalTracingIntegration === null) {\n    return undefined;\n  }\n\n  return globalTracingIntegration.constructor.getActivitySpan(activity);\n}\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\n\n\nvar Profiler =\n/** @class */\nfunction (_super) {\n  __extends(Profiler, _super);\n\n  function Profiler(props) {\n    var _this = _super.call(this, props) || this; // The activity representing how long it takes to mount a component.\n\n\n    _this._mountActivity = null; // The span of the mount activity\n\n    _this._mountSpan = undefined;\n    var _a = _this.props,\n        name = _a.name,\n        _b = _a.disabled,\n        disabled = _b === void 0 ? false : _b;\n\n    if (disabled) {\n      return _this;\n    } // If they are using @sentry/apm, we need to push/pop activities\n    // eslint-disable-next-line deprecation/deprecation\n\n\n    if (getTracingIntegration()) {\n      // eslint-disable-next-line deprecation/deprecation\n      _this._mountActivity = pushActivity(name, 'mount');\n    } else {\n      var activeTransaction = getActiveTransaction();\n\n      if (activeTransaction) {\n        _this._mountSpan = activeTransaction.startChild({\n          description: \"<\" + name + \">\",\n          op: 'react.mount'\n        });\n      }\n    }\n\n    return _this;\n  } // If a component mounted, we can finish the mount activity.\n\n\n  Profiler.prototype.componentDidMount = function () {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountSpan = getActivitySpan(this._mountActivity); // eslint-disable-next-line deprecation/deprecation\n\n      popActivity(this._mountActivity);\n      this._mountActivity = null;\n    }\n  };\n\n  Profiler.prototype.componentDidUpdate = function (_a) {\n    var _this = this;\n\n    var updateProps = _a.updateProps,\n        _b = _a.includeUpdates,\n        includeUpdates = _b === void 0 ? true : _b; // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      var changedProps = Object.keys(updateProps).filter(function (k) {\n        return updateProps[k] !== _this.props.updateProps[k];\n      });\n\n      if (changedProps.length > 0) {\n        // The update span is a point in time span with 0 duration, just signifying that the component\n        // has been updated.\n        var now = timestampWithMs();\n\n        this._mountSpan.startChild({\n          data: {\n            changedProps: changedProps\n          },\n          description: \"<\" + this.props.name + \">\",\n          endTimestamp: now,\n          op: \"react.update\",\n          startTimestamp: now\n        });\n      }\n    }\n  }; // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n\n\n  Profiler.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n        name = _a.name,\n        _b = _a.includeRender,\n        includeRender = _b === void 0 ? true : _b;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: \"<\" + name + \">\",\n        endTimestamp: timestampWithMs(),\n        op: \"react.render\",\n        startTimestamp: this._mountSpan.endTimestamp\n      });\n    }\n  };\n\n  Profiler.prototype.render = function () {\n    return this.props.children;\n  }; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  Profiler.defaultProps = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true\n  };\n  return Profiler;\n}(React.Component);\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\n\n\nfunction withProfiler(WrappedComponent, // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = function Wrapped(props) {\n    return React.createElement(Profiler, __assign({}, options, {\n      name: componentDisplayName,\n      updateProps: props\n    }), React.createElement(WrappedComponent, __assign({}, props)));\n  };\n\n  Wrapped.displayName = \"profiler(\" + componentDisplayName + \")\"; // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\n\n\nfunction useProfiler(name, options) {\n  if (options === void 0) {\n    options = {\n      disabled: false,\n      hasRenderSpan: true\n    };\n  }\n\n  var _a = __read(React.useState(function () {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: \"<\" + name + \">\",\n        op: 'react.mount'\n      });\n    }\n\n    return undefined;\n  }), 1),\n      mountSpan = _a[0];\n\n  React.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\" + name + \">\",\n          endTimestamp: timestampWithMs(),\n          op: \"react.render\",\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    }; // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n/** Grabs active transaction off scope */\n\nexport function getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = getCurrentHub();\n  }\n\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}","map":null,"metadata":{},"sourceType":"module"}