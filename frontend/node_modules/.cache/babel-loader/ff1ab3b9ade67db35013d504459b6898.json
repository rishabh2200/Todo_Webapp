{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobalObject } from '@sentry/utils';\nimport { initMetric } from './lib/initMetric';\nvar global = getGlobalObject();\n\nvar afterLoad = function afterLoad(callback) {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\n\nvar getNavigationEntryFromPerformanceTiming = function getNavigationEntryFromPerformanceTiming() {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // eslint-disable-next-line deprecation/deprecation\n  var timing = global.performance.timing;\n  var navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0\n  };\n\n  for (var key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max(timing[key] - timing.navigationStart, 0);\n    }\n  }\n\n  return navigationEntry;\n};\n\nexport var getTTFB = function getTTFB(onReport) {\n  var metric = initMetric('TTFB');\n  afterLoad(function () {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      var navigationEntry = global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n      metric.value = metric.delta = navigationEntry.responseStart;\n      metric.entries = [navigationEntry];\n      onReport(metric);\n    } catch (error) {// Do nothing.\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}