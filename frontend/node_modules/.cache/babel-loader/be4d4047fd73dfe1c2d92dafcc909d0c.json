{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport { defaultRequestInstrumentationOptions, registerRequestInstrumentation } from './request';\nimport { defaultRoutingInstrumentation } from './router';\nexport var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = __assign({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\n\n\nvar BrowserTracing =\n/** @class */\nfunction () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    this._metrics = new MetricsInstrumentation();\n    this._emitOptionsWarning = false;\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins; // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n\n    if (_options && _options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      logger.warn(\"[Tracing] We added a reasonable default for you: \" + defaultRequestInstrumentationOptions.tracingOrigins);\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        routingInstrumentation = _a.routingInstrumentation,\n        startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n        startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n        markBackgroundTransactions = _a.markBackgroundTransactions,\n        traceFetch = _a.traceFetch,\n        traceXHR = _a.traceXHR,\n        tracingOrigins = _a.tracingOrigins,\n        shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    routingInstrumentation(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n\n\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n\n    if (!this._getCurrentHub) {\n      logger.warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        beforeNavigate = _a.beforeNavigate,\n        idleTimeout = _a.idleTimeout,\n        maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext; // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n\n    var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n\n    logger.log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n\n    var hub = this._getCurrentHub();\n\n    var location = getGlobalObject().location;\n    var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true, {\n      location: location\n    });\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\n\nexport { BrowserTracing };\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\n\nexport function getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n/** Returns the value of a meta tag */\n\nexport function getMetaContent(metaName) {\n  var el = document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\n\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}","map":null,"metadata":{},"sourceType":"module"}