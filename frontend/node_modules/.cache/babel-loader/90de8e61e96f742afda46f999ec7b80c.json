{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { logger, timestampWithMs } from '@sentry/utils';\nimport { SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\nexport var DEFAULT_IDLE_TIMEOUT = 1000;\n/**\n * @inheritDoc\n */\n\nvar IdleTransactionSpanRecorder =\n/** @class */\nfunction (_super) {\n  __extends(IdleTransactionSpanRecorder, _super);\n\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    if (transactionSpanId === void 0) {\n      transactionSpanId = '';\n    }\n\n    var _this = _super.call(this, maxlen) || this;\n\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  IdleTransactionSpanRecorder.prototype.add = function (span) {\n    var _this = this; // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n\n\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = function (endTimestamp) {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n\n        _this._popActivity(span.spanId);\n      }; // We should only push new activities if the span does not have an end timestamp.\n\n\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    _super.prototype.add.call(this, span);\n  };\n\n  return IdleTransactionSpanRecorder;\n}(SpanRecorder);\n\nexport { IdleTransactionSpanRecorder };\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\n\nvar IdleTransaction =\n/** @class */\nfunction (_super) {\n  __extends(IdleTransaction, _super);\n\n  function IdleTransaction(transactionContext, _idleHub, // The time to wait in ms until the idle transaction will be finished. Default: 1000\n  _idleTimeout, // If an idle transaction should be put itself on and off the scope automatically.\n  _onScope) {\n    if (_idleTimeout === void 0) {\n      _idleTimeout = DEFAULT_IDLE_TIMEOUT;\n    }\n\n    if (_onScope === void 0) {\n      _onScope = false;\n    }\n\n    var _this = _super.call(this, transactionContext, _idleHub) || this;\n\n    _this._idleHub = _idleHub;\n    _this._idleTimeout = _idleTimeout;\n    _this._onScope = _onScope; // Activities store a list of active spans\n\n    _this.activities = {}; // Stores reference to the timeout that calls _beat().\n\n    _this._heartbeatTimer = 0; // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n\n    _this._heartbeatCounter = 0; // We should not use heartbeat if we finished a transaction\n\n    _this._finished = false;\n    _this._beforeFinishCallbacks = [];\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub); // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n\n      logger.log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_this);\n      });\n    }\n\n    _this._initTimeout = setTimeout(function () {\n      if (!_this._finished) {\n        _this.finish();\n      }\n    }, _this._idleTimeout);\n    return _this;\n  }\n  /** {@inheritDoc} */\n\n\n  IdleTransaction.prototype.finish = function (endTimestamp) {\n    var e_1, _a;\n\n    var _this = this;\n\n    if (endTimestamp === void 0) {\n      endTimestamp = timestampWithMs();\n    }\n\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      try {\n        for (var _b = __values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var callback = _c.value;\n          callback(this, endTimestamp);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === _this.spanId) {\n          return true;\n        } // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n\n\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        var keepSpan = span.startTimestamp < endTimestamp;\n\n        if (!keepSpan) {\n          logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n        }\n\n        return keepSpan;\n      });\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    } // this._onScope is true if the transaction was previously on the scope.\n\n\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return _super.prototype.finish.call(this, endTimestamp);\n  };\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n\n\n  IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n    this._beforeFinishCallbacks.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n    var _this = this;\n\n    if (!this.spanRecorder) {\n      var pushActivity = function pushActivity(id) {\n        if (_this._finished) {\n          return;\n        }\n\n        _this._pushActivity(id);\n      };\n\n      var popActivity = function popActivity(id) {\n        if (_this._finished) {\n          return;\n        }\n\n        _this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen); // Start heartbeat so that transactions do not run forever.\n\n      logger.log('Starting heartbeat');\n\n      this._pingHeartbeat();\n    }\n\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n\n\n  IdleTransaction.prototype._pushActivity = function (spanId) {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n\n    logger.log(\"[Tracing] pushActivity: \" + spanId);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  };\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n\n\n  IdleTransaction.prototype._popActivity = function (spanId) {\n    var _this = this;\n\n    if (this.activities[spanId]) {\n      logger.log(\"[Tracing] popActivity \" + spanId); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      var timeout = this._idleTimeout; // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n\n      var end_1 = timestampWithMs() + timeout / 1000;\n      setTimeout(function () {\n        if (!_this._finished) {\n          _this.finish(end_1);\n        }\n      }, timeout);\n    }\n  };\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n\n\n  IdleTransaction.prototype._beat = function () {\n    clearTimeout(this._heartbeatTimer); // We should not be running heartbeat if the idle transaction is finished.\n\n    if (this._finished) {\n      return;\n    }\n\n    var keys = Object.keys(this.activities);\n    var heartbeatString = keys.length ? keys.reduce(function (prev, current) {\n      return prev + current;\n    }) : '';\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      logger.log(\"[Tracing] Transaction finished because of no change for 3 heart beats\");\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag('heartbeat', 'failed');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  };\n  /**\n   * Pings the heartbeat\n   */\n\n\n  IdleTransaction.prototype._pingHeartbeat = function () {\n    var _this = this;\n\n    logger.log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n    this._heartbeatTimer = setTimeout(function () {\n      _this._beat();\n    }, 5000);\n  };\n\n  return IdleTransaction;\n}(Transaction);\n\nexport { IdleTransaction };\n/**\n * Reset active transaction on scope\n */\n\nfunction clearActiveTransaction(hub) {\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      var transaction = scope.getTransaction();\n\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}