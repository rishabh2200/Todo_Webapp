{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { getCurrentHub, Hub } from '@sentry/hub';\nimport { dropUndefinedKeys, isInstanceOf, logger } from '@sentry/utils';\nimport { Span as SpanClass, SpanRecorder } from './span';\n/** JSDoc */\n\nvar Transaction =\n/** @class */\nfunction (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n\n\n  function Transaction(transactionContext, hub) {\n    var _this = _super.call(this, transactionContext) || this;\n\n    _this._metadata = {};\n    _this._measurements = {};\n    /**\n     * The reference to the current hub.\n     */\n\n    _this._hub = getCurrentHub();\n\n    if (isInstanceOf(hub, Hub)) {\n      _this._hub = hub;\n    }\n\n    _this.name = transactionContext.name || '';\n    _this._trimEnd = transactionContext.trimEnd; // this is because transactions are also spans, and spans have a transaction pointer\n\n    _this.transaction = _this;\n    return _this;\n  }\n  /**\n   * JSDoc\n   */\n\n\n  Transaction.prototype.setName = function (name) {\n    this.name = name;\n  };\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n\n\n  Transaction.prototype.initSpanRecorder = function (maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n\n\n  Transaction.prototype.setMeasurements = function (measurements) {\n    this._measurements = __assign({}, measurements);\n  };\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n\n\n  Transaction.prototype.setMetadata = function (newMetadata) {\n    this._metadata = __assign(__assign({}, this._metadata), newMetadata);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.finish = function (endTimestamp) {\n    var _this = this; // This transaction is already finished, so we should not flush it again.\n\n\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    } // just sets the end timestamp\n\n\n    _super.prototype.finish.call(this, endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      return undefined;\n    }\n\n    var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) {\n      return s !== _this && s.endTimestamp;\n    }) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n\n        return prev;\n      }).endTimestamp;\n    }\n\n    var transaction = {\n      contexts: {\n        trace: this.getTraceContext()\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      debug_meta: this._metadata\n    };\n    var hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n      transaction.measurements = this._measurements;\n    }\n\n    return this._hub.captureEvent(transaction);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.toContext = function () {\n    var spanContext = _super.prototype.toContext.call(this);\n\n    return dropUndefinedKeys(__assign(__assign({}, spanContext), {\n      name: this.name,\n      trimEnd: this._trimEnd\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.updateWithContext = function (transactionContext) {\n    var _a;\n\n    _super.prototype.updateWithContext.call(this, transactionContext);\n\n    this.name = (_a = transactionContext.name, _a !== null && _a !== void 0 ? _a : '');\n    this._trimEnd = transactionContext.trimEnd;\n    return this;\n  };\n\n  return Transaction;\n}(SpanClass);\n\nexport { Transaction };","map":null,"metadata":{},"sourceType":"module"}