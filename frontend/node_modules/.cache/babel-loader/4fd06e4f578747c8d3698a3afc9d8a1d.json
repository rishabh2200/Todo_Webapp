{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { captureException, showReportDialog, withScope } from '@sentry/browser';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nexport var UNKNOWN_COMPONENT = 'unknown';\nvar INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null\n};\n/**\n * A ErrorBoundary component that logs errors to Sentry.\n * Requires React >= 16\n */\n\nvar ErrorBoundary =\n/** @class */\nfunction (_super) {\n  __extends(ErrorBoundary, _super);\n\n  function ErrorBoundary() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = INITIAL_STATE;\n\n    _this.resetErrorBoundary = function () {\n      var onReset = _this.props.onReset;\n      var _a = _this.state,\n          error = _a.error,\n          componentStack = _a.componentStack,\n          eventId = _a.eventId;\n\n      if (onReset) {\n        onReset(error, componentStack, eventId);\n      }\n\n      _this.setState(INITIAL_STATE);\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.prototype.componentDidCatch = function (error, _a) {\n    var _this = this;\n\n    var componentStack = _a.componentStack;\n    var _b = this.props,\n        beforeCapture = _b.beforeCapture,\n        onError = _b.onError,\n        showDialog = _b.showDialog,\n        dialogOptions = _b.dialogOptions;\n    withScope(function (scope) {\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n\n      var eventId = captureException(error, {\n        contexts: {\n          react: {\n            componentStack: componentStack\n          }\n        }\n      });\n\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n\n      if (showDialog) {\n        showReportDialog(__assign(__assign({}, dialogOptions), {\n          eventId: eventId\n        }));\n      } // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n\n\n      _this.setState({\n        error: error,\n        componentStack: componentStack,\n        eventId: eventId\n      });\n    });\n  };\n\n  ErrorBoundary.prototype.componentDidMount = function () {\n    var onMount = this.props.onMount;\n\n    if (onMount) {\n      onMount();\n    }\n  };\n\n  ErrorBoundary.prototype.componentWillUnmount = function () {\n    var _a = this.state,\n        error = _a.error,\n        componentStack = _a.componentStack,\n        eventId = _a.eventId;\n    var onUnmount = this.props.onUnmount;\n\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  };\n\n  ErrorBoundary.prototype.render = function () {\n    var fallback = this.props.fallback;\n    var _a = this.state,\n        error = _a.error,\n        componentStack = _a.componentStack,\n        eventId = _a.eventId;\n\n    if (error) {\n      if (React.isValidElement(fallback)) {\n        return fallback;\n      }\n\n      if (typeof fallback === 'function') {\n        return fallback({\n          error: error,\n          componentStack: componentStack,\n          resetError: this.resetErrorBoundary,\n          eventId: eventId\n        });\n      } // Fail gracefully if no fallback provided\n\n\n      return null;\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(React.Component); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction withErrorBoundary(WrappedComponent, errorBoundaryOptions) {\n  var componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = function Wrapped(props) {\n    return React.createElement(ErrorBoundary, __assign({}, errorBoundaryOptions), React.createElement(WrappedComponent, __assign({}, props)));\n  };\n\n  Wrapped.displayName = \"errorBoundary(\" + componentDisplayName + \")\"; // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, withErrorBoundary };","map":null,"metadata":{},"sourceType":"module"}