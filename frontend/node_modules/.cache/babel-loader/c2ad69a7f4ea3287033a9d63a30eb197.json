{"ast":null,"code":"import { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\nvar global = getGlobalObject();\n/**\n * Default function implementing pageload and navigation transactions\n */\n\nexport function defaultRoutingInstrumentation(startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  var startingUrl = global.location.href;\n  var activeTransaction;\n\n  if (startTransactionOnPageLoad) {\n    activeTransaction = startTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: function callback(_a) {\n        var to = _a.to,\n            from = _a.from;\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n\n          if (activeTransaction) {\n            logger.log(\"[Tracing] Finishing current transaction with op: \" + activeTransaction.op); // If there's an open transaction on the scope, we need to finish it before creating an new one.\n\n            activeTransaction.finish();\n          }\n\n          activeTransaction = startTransaction({\n            name: global.location.pathname,\n            op: 'navigation'\n          });\n        }\n      },\n      type: 'history'\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}