{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getFID = function getFID(onReport) {\n  var metric = initMetric('FID');\n  var firstHidden = getFirstHidden();\n\n  var entryHandler = function entryHandler(entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < firstHidden.timeStamp) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      metric.isFinal = true;\n      report();\n    }\n  };\n\n  var po = observe('first-input', entryHandler);\n  var report = bindReporter(onReport, metric, po);\n\n  if (po) {\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      po.disconnect();\n    }, true);\n  } else {\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      window.perfMetrics.onFirstInputDelay(function (value, event) {\n        // Only report if the page wasn't hidden prior to the first input.\n        if (event.timeStamp < firstHidden.timeStamp) {\n          metric.value = value;\n          metric.isFinal = true;\n          metric.entries = [{\n            entryType: 'first-input',\n            name: event.type,\n            target: event.target,\n            cancelable: event.cancelable,\n            startTime: event.timeStamp,\n            processingStart: event.timeStamp + value\n          }];\n          report();\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}