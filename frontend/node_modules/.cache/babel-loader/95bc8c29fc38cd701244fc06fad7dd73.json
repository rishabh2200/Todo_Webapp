{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\nimport { SpanStatus } from './spanstatus';\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\n\nvar SpanRecorder =\n/** @class */\nfunction () {\n  function SpanRecorder(maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n\n    this.spans = [];\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n\n\n  SpanRecorder.prototype.add = function (span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  };\n\n  return SpanRecorder;\n}();\n\nexport { SpanRecorder };\n/**\n * Span contains all data about a span\n */\n\nvar Span =\n/** @class */\nfunction () {\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    /**\n     * @inheritDoc\n     */\n    this.traceId = uuid4();\n    /**\n     * @inheritDoc\n     */\n\n    this.spanId = uuid4().substring(16);\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n\n    this.startTimestamp = timestampWithMs();\n    /**\n     * @inheritDoc\n     */\n\n    this.tags = {};\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.data = {};\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    } // We want to include booleans as well here\n\n\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n\n\n  Span.prototype.child = function (spanContext) {\n    return this.startChild(spanContext);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.startChild = function (spanContext) {\n    var childSpan = new Span(__assign(__assign({}, spanContext), {\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId\n    }));\n    childSpan.spanRecorder = this.spanRecorder;\n\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n    return childSpan;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setTag = function (key, value) {\n    var _a;\n\n    this.tags = __assign(__assign({}, this.tags), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  Span.prototype.setData = function (key, value) {\n    var _a;\n\n    this.data = __assign(__assign({}, this.data), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setStatus = function (value) {\n    this.status = value;\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setHttpStatus = function (httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    var spanStatus = SpanStatus.fromHttpCode(httpStatus);\n\n    if (spanStatus !== SpanStatus.UnknownError) {\n      this.setStatus(spanStatus);\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.isSuccess = function () {\n    return this.status === SpanStatus.Ok;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.finish = function (endTimestamp) {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toTraceparent = function () {\n    var sampledString = '';\n\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n\n    return this.traceId + \"-\" + this.spanId + sampledString;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toContext = function () {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.updateWithContext = function (spanContext) {\n    var _a, _b, _c, _d, _e;\n\n    this.data = (_a = spanContext.data, _a !== null && _a !== void 0 ? _a : {});\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = (_b = spanContext.spanId, _b !== null && _b !== void 0 ? _b : this.spanId);\n    this.startTimestamp = (_c = spanContext.startTimestamp, _c !== null && _c !== void 0 ? _c : this.startTimestamp);\n    this.status = spanContext.status;\n    this.tags = (_d = spanContext.tags, _d !== null && _d !== void 0 ? _d : {});\n    this.traceId = (_e = spanContext.traceId, _e !== null && _e !== void 0 ? _e : this.traceId);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.getTraceContext = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId\n    });\n  };\n\n  return Span;\n}();\n\nexport { Span };","map":null,"metadata":{},"sourceType":"module"}